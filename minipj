using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Imaging;
using System.Threading;
using MySql.Data.MySqlClient;
namespace 미니프로젝트_Ver_2._2
{
    public partial class Form1 : Form
    {
        String connStr = "Server=192.168.56.103;Uid=winUser;Pwd=4321;Database=image_db;Charset=UTF8";
        MySqlConnection conn;
        MySqlCommand cmd;
        MySqlDataReader reader;
        String sql = "";
        public Form1()
        {
            InitializeComponent();
            MessageBox.Show("로딩이 완료되었습니다");
        }
        // 전역변수부
        byte[,,] inImage = null, outImage = null;
        int inH, inW, outH, outW;
        string fileName;
        Bitmap paper, bitmap;
        //bool mouseYN = false;
        int mouseYN = 0; // 0이면 Off, 나머지는 ON
        int sx, sy, ex, ey; 
        // 임의 범위용
        int[] mx = new int[500];
        int[] my = new int[500];
        int mCount = 0;

        const int RGB = 3, RR = 0, GG = 1, BB = 2;
        /// 임시 파일용 배열과 임시 파일 개수

        string[] tmpFiles = new string[500]; // 최대 500개
            
        int tmpIndex = 0;

        // 메뉴 이벤트 처리부
        private void 열기CtrlOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openImage();
        }

        private void 저장CtrlSToolStripMenuItem_Click(object sender, EventArgs e)
        {
            saveImage();
        }
        private void 동일이미지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            equal_Image();
        }
        private void 밝게어둡게ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            add_Image();
        }
        private void 그레이스케일ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            grayscale();
        }
        private void 색반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }
        private void 반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            rev_Image();
        }
        private void 사각영역선택ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mouseYN = 1;
        }
        private void 임의영역선택ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mouseYN = 2;
        }
        private bool pointInPolygon(int RGB, int pntX, int pntY)
        {
            bool inPoly = false;
            int iCrosses = 0; // 교차 횟수
            for (int i = 0; i < mCount; i++)
            {
                int j = (i + 1) % mCount;
                if ((my[i] > pntY) != (my[j] > pntY))
                {
                    double atX =
 ((((double)mx[j] - mx[i]) / ((double)my[j] - my[i])) * ((double)pntY - my[i])) + (double)mx[i];
                    if (pntX < atX)
                        iCrosses++;
                }
            } // 홀수면 내부, 짝수면 외부에 있음 
            if (0 == (iCrosses % 2))
                inPoly = false;
            else inPoly = true;
            return inPoly;
        }
        private void Form1_KeyDown_1(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                switch (e.KeyCode)
                {
                    case Keys.O:
                        openImage(); break;
                    case Keys.S:
                        saveImage(); break;
                    case Keys.Z:

                        restoreTempFile(); break;
                }
            }
        }
        private void 감마변환4ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            gm_Image();
        }
        private void 솔라라이징ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            sol_Image();
        }
        private void 파라볼라ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            pb_Image();
        }
        private void 포스터라이징ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            posterising();
        }
        private void 채도변경ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            change_satur();
        }
        private void 엠보싱ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            emboss_Image();
        }
        private void 블러링ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            blur_Image();
        }
        private void 샤프닝ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            sharpen_Image();
        }
        private void 엣지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            edge_Image();
        }
        private void 라플레시안ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            edge2_Image();
        }
        private void 좌우반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            lrm_Image();
        }
        private void 상하반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            udm_Image();
        }
        private void 회전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            rot_Image();
        }
        private void 줌인ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            zoom_in();
        }
        private void 줌아웃ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            zoom_out();
        }
        private void 히스토그램그리기ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            draw_histogram();
        }
        private void 히스토그램스트레칭ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            histo_stretch();
        }
        private void 엔드인탐색ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            endin();
        }
        private void 히스토그램평활화ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            histo_equal();
        }
        // 공통 함수부
        double getValue()
        {
            subform sub = new subform(); // 서브폼 준비
            if (sub.ShowDialog() == DialogResult.Cancel)
                return 0;
            int value = (int)sub.numericUpDown1.Value;
            return value;
        }
        void Loading()
        {
            SplashForm frm = new SplashForm();
            Application.Run(frm);
        }
        void openImage()
        {
            OpenFileDialog ofd = new OpenFileDialog();  // 객체 생성
            ofd.DefaultExt = "";
            ofd.Filter = "칼라 필터 | *.png; *.jpg; *.bmp; *.tif";
            if (ofd.ShowDialog() != DialogResult.OK)
                return;
            fileName = ofd.FileName;
            // 파일 --> 비트맵(bitmap)
            bitmap = new Bitmap(fileName);
            // 중요! 입력이미지의 높이, 폭 알아내기
            inW = bitmap.Height;
            inH = bitmap.Width;
            inImage = new byte[RGB, inH, inW]; // 메모리 할당
            // 비트맵(bitmap) --> 메모리(로딩)
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    Color c = bitmap.GetPixel(i, k);
                    inImage[RR, i, k] = c.R;
                    inImage[GG, i, k] = c.G;
                    inImage[BB, i, k] = c.B;
                }
            equal_Image();
        }
        void saveImage()
        {
            SaveFileDialog sfd = new SaveFileDialog();
            sfd.DefaultExt = "";
            sfd.Filter = "PNG File(*.png) | *.png";
            if (sfd.ShowDialog() != DialogResult.OK)
                return;
            String saveFname = sfd.FileName;
            Bitmap image = new Bitmap(outH, outW); // 빈 비트맵(종이) 준비
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    Color c;
                    int r, g, b;
                    r = outImage[0, i, k];
                    g = outImage[1, i, k];
                    b = outImage[2, i, k];
                    c = Color.FromArgb(r, g, b);
                    image.SetPixel(i, k, c);  // 종이에 콕콕 찍기
                }
            // 상단에 using System.Drawing.Imaging; 추가해야 함
            image.Save(saveFname, ImageFormat.Png); // 종이를 PNG로 저장
            toolStripStatusLabel1.Text = saveFname + "으로 저장됨.";
        }
        // 영상처리 함수부
        void equal_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = inImage[rgb, i, k];
                    }
            displayImage();
            saveTempFile();
        }
        void displayImage()
        {
            // 벽, 게시판, 종이 크기 조절
            paper = new Bitmap(outH, outW); // 종이
            pictureBox1.Size = new Size(outH, outW); // 캔버스
            this.Size = new Size(outH + 20, outW + 80); // 벽
            if (outH + 550 < 1050 && outW + 130 < 770)
                this.Size = new Size(1050, 770); // 벽
            else if (outH + 550 < 1050 && outW + 130 >= 770)
                this.Size = new Size(1050, outW + 130);
            else if (outH + 550 >= 1050 && outW + 130 < 770)
                this.Size = new Size(outH + 550, 770);
            else
                this.Size = new Size(outH + 550, outW + 130);
            Color pen; // 펜(콕콕 찍을 용도)
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    byte r = outImage[RR, i, k]; // 잉크(색상값)
                    byte g = outImage[GG, i, k];
                    byte b = outImage[BB, i, k];
                    pen = Color.FromArgb(r, g, b); // 펜에 잉크 묻히기
                    paper.SetPixel(i, k, pen); // 종이에 콕 찍기
                }
            pictureBox1.Image = paper; // 게시판에 종이를 붙이기.
            toolStripStatusLabel1.Text =
                outH.ToString() + "x" + outW.ToString() + "  " + fileName;
        }
        void add_Image()
        {
            if (inImage == null)
                return;
            int value = (int)getValue();
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        if (inImage[rgb, i, k] + value > 255)
                            outImage[rgb, i, k] = 255;
                        else if (inImage[rgb, i, k] + value < 0)
                            outImage[rgb, i, k] = 0;
                        else
                            outImage[rgb, i, k] = (byte)(inImage[rgb, i, k] + value);
                    }
            displayImage();
            saveTempFile();
        }
        void grayscale()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    int hap = inImage[RR, i, k] + inImage[GG, i, k] + inImage[BB, i, k];
                    byte rgb = (byte)(hap / 3.0);
                    outImage[RR, i, k] = rgb;
                    outImage[GG, i, k] = rgb;
                    outImage[BB, i, k] = rgb;
                }
            displayImage();
            saveTempFile();
        }
        void bw_Image()
        {      // 평균 기준 흑백
            if (inImage == null)
                return;

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        if (outImage[rgb, i, k] < 127)
                            outImage[rgb, i, k] = 0;
                        else
                            outImage[rgb, i, k] = 255;
                    }
                }
            displayImage();
            saveTempFile();
        }

        void rev_Image()
        {      // 영상 반전
            if (mouseYN == 0)
            {
                sx = 0; ex = inH;
                sy = 0; ey = inW;
            }
            for (int rgb = 0; rgb < RGB; rgb++)
            {
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        if ((sx <= k && k <= ex) && (sy <= i && i <= ey))
                            outImage[rgb, i, k] = (byte)(255 - inImage[rgb, i, k]);
                        else
                            outImage[rgb, i, k] = inImage[rgb, i, k];
                    }
                }
            }
            displayImage();
            saveTempFile();
        }
        void gm_Image()
        {      // 감마 변환
            if (inImage == null)
                return;
            int value = (int)getValue();
            for (int rgb = 0; rgb < RGB; rgb++)
            {
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = (byte)(255.0 * Math.Pow(((double)inImage[rgb, i, k] / 255.0), value));
                        if (outImage[rgb, i, k] > 255)
                        {
                            outImage[rgb, i, k] = 255;
                        }
                    }
                }
            }
            displayImage();
            saveTempFile();
        }
        void sol_Image()
        {      // 솔라라이징
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = (byte)(255 - (255 * Math.Pow(((double)inImage[rgb, i, k] / 128) - 1, 2)));
                    }
            displayImage();
            saveTempFile();
        }
        void pb_Image()
        {      // 파라볼라 변화
            if (inImage == null)
                return;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = (byte)(255 * Math.Pow(((double)inImage[rgb, i, k] / 128) - 1, 2));
                    }
            displayImage();
            saveTempFile();
        }
        void lrm_Image()
        {      // 좌우 반전
            if (inImage == null)
                return;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {

                        outImage[rgb, i, k] = inImage[rgb, inH - 1 - i, k];
                    }
            displayImage();
            saveTempFile();
        }
        void udm_Image()
        {      // 상하 반전
            if (inImage == null)
                return;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = inImage[rgb, i, inW - 1 - k];
                    }
                }
            displayImage();
            saveTempFile();
        }
        void rot_Image()
        {      // 회전
            if (inImage == null)
                return;
            double val;
            int value = (int)getValue();
            double pi = 3.141592;
            double seta = pi / (180.0 / value);
            int center_x = inW / 2;
            int center_y = inH / 2;
            int x;
            int y;

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        x = (int)((i - center_y) * Math.Sin(seta) + (k - center_x) * Math.Cos(seta) + center_x);
                        y = (int)((i - center_y) * Math.Cos(seta) - (k - center_x) * Math.Sin(seta) + center_y);
                        if (y < 0 || y >= inH)
                        {
                            // 회전된좌표가출력영상을위한배열값을넘어갈때
                            val = 0;
                        }
                        else if (x < 0 || x >= inW)
                        {
                            // 회전된좌표가출력영상을위한배열값을넘어갈때
                            val = 0;
                        }
                        else
                        {
                            val = inImage[rgb, y, x];
                        }
                        outImage[rgb, i, k] = (byte)(val);
                    }
                }
            displayImage();
            saveTempFile();
        }

        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                switch (e.KeyCode)
                {
                    case Keys.O:
                        openImage(); break;
                    case Keys.S:
                        saveImage(); break;
                    
                }
            }
        }
        
        void saveTempFile()
        {
            //////////////////////////////////////////

            // 영상처리 효과가 계속 누적되도록 함.

            //////////////////////////////////////////

            /// (1) 입력영상을 디스크에 저장 

            string saveFname = System.IO.Path.GetTempPath() + Guid.NewGuid().ToString() + ".tmp";
            Bitmap image = new Bitmap(inH, inW); // 빈 비트맵(종이) 준비
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    Color c;
                    int r, g, b;
                    r = inImage[0, i, k];
                    g = inImage[1, i, k];
                    b = inImage[2, i, k];
                    c = Color.FromArgb(r, g, b);
                    image.SetPixel(i, k, c); // 종이에 콕콕 찍기
                }
            image.Save(saveFname, System.Drawing.Imaging.ImageFormat.Png);
            tmpFiles[tmpIndex++] = saveFname;
            /// (2) 출력영상 --> 입력영상
            inH = outH; inW = outW;
            inImage = new byte[RGB, inH, inW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                        inImage[rgb, i, k] = outImage[rgb, i, k];
        }
        void restoreTempFile()
        {
            if (tmpIndex <= 0)
                return;
            fileName = tmpFiles[--tmpIndex];
            // 파일 --> 비트맵(bitmap)
            bitmap = new Bitmap(fileName);
            // 중요! 입력이미지의 높이, 폭 알아내기
            inW = bitmap.Height;
            inH = bitmap.Width;
            inImage = new byte[RGB, inH, inW]; // 메모리 할당
            // 비트맵(bitmap) --> 메모리 (로딩)
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    Color c = bitmap.GetPixel(i, k);
                    inImage[RR, i, k] = c.R;
                    inImage[GG, i, k] = c.G;
                    inImage[BB, i, k] = c.B;
                }
            equal_Image();
            // System.IO.File.Delete(fileName); // 임시파일 삭제 
        }
        void zoom_out()
        {   // 축소  
            if (inImage == null)
                return;
            int value = (int)getValue();
            outH = (int)(inH / value); outW = (int)(inW / value);
         
            outImage = new byte[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i / value, k / value] = inImage[rgb, i, k];
                    }
            displayImage();
            saveTempFile();
        }
        void zoom_in()
        {   // 확대 
            if (inImage == null)
                return;
            int value = (int)getValue();
            outH = (int)(inH * value); outW = (int)(inW * value);
            outImage = new byte[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        outImage[rgb, i, k] = inImage[rgb, i / value, k / value];
                    }
            displayImage();
            saveTempFile();
        }
        void draw_histogram()
        {
            long[] rHisto = new long[256];
            long[] gHisto = new long[256];
            long[] bHisto = new long[256];

            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    rHisto[outImage[RR, i, k]]++;
                    gHisto[outImage[GG, i, k]]++;
                    bHisto[outImage[BB, i, k]]++;
                }
            Form2 hform = new Form2(rHisto, gHisto, bHisto);
            hform.ShowDialog();
        }
        void emboss_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { -1.0, 0.0, 0.0 },
                               { 0.0, 0.0, 0.0 },
                               { 0.0, 0.0, 1.0 } };
            double[,,] tmpInput = new double[RGB + 2, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        tmpInput[rgb + 1, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        for (int m = 0; m < MSIZE; m++)
                            for (int n = 0; n < MSIZE; n++)
                                S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                        tmpOutput[rgb, i, k] = S;
                        S = 0.0;
                    }
                }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                        tmpOutput[rgb, i, k] += 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        double d = tmpOutput[rgb, i, k];
                        if (d > 255.0)
                            d = 255.0;
                        else if (d < 0.0)
                            d = 0.0;
                        outImage[rgb, i, k] = (byte)d;
                    }
            displayImage();
            saveTempFile();
        }
        private void pictureBox1_MouseUp(object sender, MouseEventArgs e)
        {
            if (mouseYN == 0)
                return;
            else if (mouseYN == 1)
            {
                ex = e.X; ey = e.Y;
                if (sx > ex)
                {
                    int tmp = sx;
                    sx = ex;
                    ex = tmp;
                }
                if (sx > ey)
                {
                    int tmp = sy;
                    sy = ey;
                    ey = tmp;
                }
                switch (mouseYN)
                {
                    case 1: rev_Image(); break;
                }
                mouseYN = 0;
            }
        }

        private void dB열기ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DB_open();
        }

        private void dB저장ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DB_save();
        }

        private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
        {
            if (mouseYN == 0)
                return;
            else if (mouseYN == 1)
            {
                sx = e.X; sy = e.Y;
            }
            else if (mouseYN == 2) // 임의 범위
            {
                if (e.Button == MouseButtons.Left)
                {
                    mx[mCount] = e.X;
                    my[mCount] = e.Y;
                    mCount++;
                }
                else
                {
                    if (inImage == null)
                        return;
                    outH = inH; outW = inW;
                    outImage = new byte[RGB, outH, outW];

                    for (int rgb = 0; rgb < RGB; rgb++)
                        for (int i = 0; i < inH; i++)
                            for (int k = 0; k < inW; k++)
                            {
                                if (pointInPolygon(rgb, k, i))
                                    outImage[rgb, i, k] = (byte)(255 - inImage[rgb, i, k]);
                                else
                                    outImage[rgb, i, k] = inImage[rgb, i, k];
                            }
                    displayImage();
                    saveTempFile();
                    // 초기화
                    mouseYN = 0;
                    mCount = 0;
                }
            }
        }
        void blur_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 1/9.0, 1/9.0, 1/9.0 },
                               { 1/9.0, 1/9.0, 1/9.0 },
                               { 1/9.0, 1/9.0, 1/9.0 } };

            double[,,] tmpInput = new double[RGB, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        tmpInput[rgb, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        for (int m = 0; m < MSIZE; m++)
                            for (int n = 0; n < MSIZE; n++)
                                S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                        tmpOutput[rgb, i, k] = S;
                        S = 0.0;
                    }
                }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        double d = tmpOutput[rgb, i, k];
                        if (d > 255.0)
                            d = 255.0;
                        else if (d < 0.0)
                            d = 0.0;
                        outImage[rgb, i, k] = (byte)d;
                    }
            displayImage();
            saveTempFile();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            conn = new MySqlConnection(connStr);
            conn.Open();
            cmd = new MySqlCommand("", conn);
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            conn.Close();
        }

        void sharpen_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 0.0, -1.0, 0.0 },
                               { -1.0, 5.0, -1.0 },
                               { 0.0, -1.0, 0.0 } };

            double[,,] tmpInput = new double[RGB, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        tmpInput[rgb, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        for (int m = 0; m < MSIZE; m++)
                            for (int n = 0; n < MSIZE; n++)
                                S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                        tmpOutput[rgb, i, k] = S;
                        S = 0.0;
                    }
                }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        double d = tmpOutput[rgb, i, k];
                        if (d > 255.0)
                            d = 255.0;
                        else if (d < 0.0)
                            d = 0.0;
                        outImage[rgb, i, k] = (byte)d;
                    }
            displayImage();
            saveTempFile();
        }
        void edge_Image()
        {       // 수평 엣지 검출
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 0.0, 0.0, 0.0 },
                               { -1.0, 1.0, 0.0 },
                               { 0.0, 0.0, 0.0 } };
            double[,,] tmpInput = new double[RGB + 2, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        tmpInput[rgb + 1, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        for (int m = 0; m < MSIZE; m++)
                            for (int n = 0; n < MSIZE; n++)
                                S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                        tmpOutput[rgb, i, k] = S;
                        S = 0.0;
                    }
                }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        double d = tmpOutput[rgb, i, k];
                        if (d > 255.0)
                            d = 255.0;
                        else if (d < 0.0)
                            d = 0.0;
                        outImage[rgb, i, k] = (byte)d;
                    }
            displayImage();
            saveTempFile();
        }
        void edge2_Image()
        {       // 라플레시안 엣지 검출
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 1.0, 1.0, 1.0 },
                               { 1.0, -8.0, 1.0 },
                               { 1.0, 1.0, 1.0 } };
            double[,,] tmpInput = new double[RGB + 2, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        tmpInput[rgb + 1, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        for (int m = 0; m < MSIZE; m++)
                            for (int n = 0; n < MSIZE; n++)
                                S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                        tmpOutput[rgb, i, k] = S;
                        S = 0.0;
                    }
                }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        double d = tmpOutput[rgb, i, k];
                        if (d > 255.0)
                            d = 255.0;
                        else if (d < 0.0)
                            d = 0.0;
                        outImage[rgb, i, k] = (byte)d;
                    }
            displayImage();
            saveTempFile();
        }
        void histo_stretch()
        {   //히스토그램 스트레칭
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];

            byte min_val = inImage[0, 0, 0], max_val = inImage[0, 0, 0];

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        if (min_val > inImage[rgb, i, k])
                            min_val = inImage[rgb, i, k];
                        if (max_val < inImage[rgb, i, k])
                            max_val = inImage[rgb, i, k];
                    }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        // Out = (In - min) / (max - min) * 255.0
                        outImage[rgb, i, k] = (byte)
                        ((double)(inImage[rgb, i, k] - min_val) / (max_val - min_val) * 255.0);
                    }
            displayImage();
            saveTempFile();
        }
        void endin()
        {   // 엔드인 탐색
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];

            byte min_val = inImage[0, 0, 0], max_val = inImage[0, 0, 0];

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        if (min_val > inImage[rgb, i, k])
                            min_val = inImage[rgb, i, k];
                        if (max_val < inImage[rgb, i, k])
                            max_val = inImage[rgb, i, k];
                    }
            // min, max 값을 강제로 변경
            min_val += 50;
            max_val -= 50;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        // Out = (In - min) / (max - min) * 255.0
                        double value =
                       ((double)(inImage[rgb, i, k] - min_val) / (max_val - min_val) * 255.0);
                        if (value > 255)
                            value = 255;
                        else if (value < 0)
                            value = 0;
                        outImage[rgb, i, k] = (byte)value;
                    }
            displayImage();
            saveTempFile();
        }
        void histo_equal()
        {       // 히스토그램 평활화
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            ulong[] histo = new ulong[256];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        histo[inImage[rgb, i, k]]++;
            ulong[] sumHisto = new ulong[256];
            ulong sum_val = 0;
            for (int i = 0; i < 256; i++)
            {
                sum_val += histo[i];
                sumHisto[i] = sum_val;
            }
            double[] normalHisto = new double[256];
            for (int i = 0; i < 256; i++)
            {
                normalHisto[i] = ((double)sumHisto[i] / (RGB * inH * inW)) * 255.0;
            }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = (byte)normalHisto[inImage[rgb, i, k]];
                    }
            displayImage();
            saveTempFile();
        }
        void posterising()
        {       // 포스터라이징
            if (inImage == null)
                return;
            int cutLevel = 32;      //경계값
            int cut = 255 / cutLevel;   //나눈수
            //원본이미지 -> 출력이미지에 덮어씌우기
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                {
                    for (int k = 0; k < outW; k++)
                    {
                        if (inImage[rgb, i, k] < 0)                    //버그 확인겸 임시 코드, 삭제해도 무방할것으로 예상
                            outImage[rgb, i, k] = 0;
                        else if (inImage[rgb, i, k] > cut * cutLevel)  //경계값 * 나눈수 < inImg < 255 사이일때 inImg = 255
                            outImage[rgb, i, k] = 255;
                        else
                        {
                            for (int m = 0; m < cut; m++)
                            {               //0부터 경계값으로 나눈 수만큼 for 반복
                                if (inImage[rgb, i, k] < cutLevel * (m + 1))
                                {   //ex)0~31 = 32로, 32~63 = 64로 하위숫자를 위에 경계구간으로 올림
                                    outImage[rgb, i, k] = (byte)(cutLevel * (m + 1));  //제일 작은 구간부터 제일 큰구간까지 구별
                                    break;                              //outImg에 입력이 되고 다음구간에는 속하지 않는다면 for(m)나가기
                                }
                            }
                        }
                    }
                }
            displayImage();   //출력
            saveTempFile();
        }
        void change_satur()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            Color c;    //한점 색상 모델
            double hh, ss, vv;  //색상, 채도, 밝기
            int rr, gg, bb;     //레드, 그린, 블루

            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    rr = inImage[RR, i, k];
                    gg = inImage[GG, i, k];
                    bb = inImage[BB, i, k];

                    //RGB -> HSV(HSB)변환
                    c = Color.FromArgb(rr, gg, bb);
                    hh = c.GetHue();
                    ss = c.GetSaturation();
                    vv = c.GetBrightness();

                    //(핵심)채도 올리기
                    ss += 0.2;  //채도 0.2 증가

                    //HSV -> RGB 변환
                    HsvToRgb(hh, ss, vv, out rr, out gg, out bb);

                    outImage[RR, i, k] = (byte)rr;
                    outImage[GG, i, k] = (byte)gg;
                    outImage[BB, i, k] = (byte)bb;
                }
            /////////////////////////////////////////////
            displayImage();
            saveTempFile();
        }

        //HSV -> RGB변환 함수 교수님 방식
        void HsvToRgb(double h, double S, double V, out int r, out int g, out int b)
        //double은 받는 값들, out 은 내보내는 값
        {
            double H = h;
            while (H < 0) { H += 360; };
            while (H >= 360) { H -= 360; };
            double R, G, B;
            if (V <= 0)
            { R = G = B = 0; }
            else if (S <= 0)
            {
                R = G = B = V;
            }
            else
            {
                double hf = H / 60.0;
                int i = (int)Math.Floor(hf);
                double f = hf - i;
                double pv = V * (1 - S);
                double qv = V * (1 - S * f);
                double tv = V * (1 - S * (1 - f));
                switch (i)
                {
                    case 0:
                        R = V;
                        G = tv;
                        B = pv;
                        break;
                    case 1:
                        R = qv;
                        G = V;
                        B = pv;
                        break;
                    case 2:
                        R = pv;
                        G = V;
                        B = tv;
                        break;
                    case 3:
                        R = pv;
                        G = qv;
                        B = V;
                        break;
                    case 4:
                        R = tv;
                        G = pv;
                        B = V;
                        break;
                    case 5:
                        R = V;
                        G = pv;
                        B = qv;
                        break;
                    case 6:
                        R = V;
                        G = tv;
                        B = pv;
                        break;
                    case -1:
                        R = V;
                        G = pv;
                        B = qv;
                        break;
                    default:
                        R = G = B = V;
                        break;
                }
            }
            r = CheckRange((int)(R * 255.0));
            g = CheckRange((int)(G * 255.0));
            b = CheckRange((int)(B * 255.0));

            int CheckRange(int i)
            {
                if (i < 0) return 0;
                if (i > 255) return 255;
                return i;
            }
        }
        void DB_open()
        {
            DB_open frm = new DB_open();
            if (frm.ShowDialog() == DialogResult.OK)
            {
                String f_id = frm.ID;
                sql = "SELECT f_fname, f_extname, f_fsize, f_data FROM image_tbl WHERE f_id =";
                sql += f_id;
                cmd.CommandText = sql;

                reader = cmd.ExecuteReader();
                reader.Read();

                String f_fname = reader["f_fname"].ToString();
                String f_extname = reader["f_extname"].ToString();
                int f_fsize = int.Parse(reader["f_fsize"].ToString());
                byte[] f_data = new byte[f_fsize];
                reader.GetBytes(reader.GetOrdinal("f_data"), 0, f_data, 0, f_fsize);

                fileName = "C:\\image\\DB\\" + f_fname + "." + f_extname;

                FileStream fsr = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                if (fsr.ReadByte() == -1)
                {
                    FileStream fsw = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write);
                    fsw.Write(f_data, 0, (int)f_fsize);
                    fsw.Close();
                }

                reader.Close();

                bitmap = new Bitmap(fileName);

                inH = bitmap.Width;
                inW = bitmap.Height;

                inImage = new byte[RGB, inH, inW];

                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        Color c = bitmap.GetPixel(i, k);
                        inImage[RR, i, k] = c.R;
                        inImage[GG, i, k] = c.G;
                        inImage[BB, i, k] = c.B;
                    }

                equal_Image();
            }
        }

        void DB_save()
        {
            DB_save frm = new DB_save(outH, outW, outImage);
            if (frm.ShowDialog() == DialogResult.OK)
            {
                MessageBox.Show("저장 완료");
            }
        }
    }
}

  
