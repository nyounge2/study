using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
namespace Quiz012_1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        // 전역 변수부
        static byte[,] inImage, outImage;
        static int inH, inW, outH, outW;
        static string fileName;
        static Bitmap paper;

        private void Form1_Load(object sender, EventArgs e)
        {

        }
        private void 파일ToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }
       
        private void 동일이미지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            equal_Image();
        }

        private void 반전이미지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            rev_Image();
        }

        private void 흑백ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            bw_Image();
        }

        private void 밝게ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            br_Image();
        }

        private void 어둡게ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dk_Image();
        }

        private void 열기ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openImage();
        }
        private void 감마변환ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            gm_Image();
        }

        private void 솔라라이징ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            sol_Image();
        }
        private void 파라볼라ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            pb_Image();
        }
        private void 좌우반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            lrm_Image();
        }

        private void 상하반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            udm_Image();
        }
        private void 회전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            rot_Image();
           }
        private void 줌인ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            zoom_in();
        }
        private void 줌아웃ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            zoom_out();
        }
        private void 엠보싱ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            emboss_Image();
        }
        private void 블러링ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            blur_Image();
        }
        private void 샤프닝ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            sharpen_Image();
        }
        private void 경계선검출엣지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            edge_Image();
        }
        void openImage()
        {
            OpenFileDialog ofd = new OpenFileDialog();  
            ofd.ShowDialog();
            fileName = ofd.FileName;

            BinaryReader br = new BinaryReader(File.Open(fileName, FileMode.Open));         
            long fsize = new FileInfo(fileName).Length;
            inH = inW = (int)Math.Sqrt(fsize);
            inImage = new byte[inH, inW];
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                    inImage[i, k] = br.ReadByte();
            br.Close();
            equal_Image();
        }
        void displayImage()
        {
            // 벽, 게시판, 종이 크기 조절
            paper = new Bitmap(outH, outW);     // 종이  
            pictureBox1.Size = new Size(outH, outW);    // 캔버스
            this.Size = new Size(outH + 20, outW + 80); //벽

            Color pen; // 펜(콕콕 찍을 용도)
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    byte data = outImage[i, k]; // 잉크(색상값)
                    pen = Color.FromArgb(data, data, data); //펜에 잉크 묻히기
                    paper.SetPixel(k, i, pen);  // 종이에 콕 찍기
                }
            pictureBox1.Image = paper;   // 게시판에 종이 붙이기
            toolStripStatusLabel1.Text =
                outH.ToString() + "x" + outW.ToString() + " " + fileName;

        }
        void equal_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    outImage[i, k] = inImage[i, k];
                }
            /////////////////////////////////////////////
            displayImage();
        }
        double getValue()
        {
            subForm1 sub = new subForm1(); // 서브폼 준비
            if (sub.ShowDialog() == DialogResult.Cancel)
                return 0;
            int value = (int)sub.numericUpDown2.Value;
            return value;
        }
        void rev_Image()
        {      // 영상 반전
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    outImage[i, k] = (byte)(255 - inImage[i, k]);
                }
            }
            displayImage();
            
        }
        
        void bw_Image()
        {      // 평균 기준 흑백
            if (inImage == null)
                return;
            int sum = 0;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    sum += outImage[i, k];
                }
            }
            double avg = (double)sum / (inH * inW);   // 평균
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    if (outImage[i, k] < avg)
                        outImage[i, k] = 0;
                    else
                        outImage[i, k] = 255;
                  
                }
            }
            displayImage();
        }
        void br_Image()
        {   // 밝게
            if (inImage == null)
                return;
            int value = (int)getValue();
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    if (inImage[i, k] + value > 255)
                        outImage[i, k] = 255;
                    else
                        outImage[i, k] = (byte)(inImage[i, k] + value);
                }
            }
            displayImage();

        }

        

       

        void dk_Image()
        {   // 어둡게
            if (inImage == null)
                return;
            int value = (int)getValue();
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    if (inImage[i, k] - value < 0)
                        outImage[i, k] = 0;
                    else
                        outImage[i, k] = (byte)(inImage[i, k] - value);
                }
            }
            displayImage();
        }
        void gm_Image()
        {      // 감마 변환
            if (inImage == null)
                return;
            int value = (int)getValue();
            
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    outImage[i, k] = (byte)(255.0 * Math.Pow(((double)inImage[i, k] / 255.0), value));
                    if (outImage[i, k] > 255)
                    {
                        outImage[i, k] = 255;
                    }
                }
            }
            displayImage();
        }

        

        void sol_Image()
        {      // 솔라라이징
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    outImage[i, k] = (byte)(255 - (255 * Math.Pow(((double)inImage[i, k] / 128) - 1, 2)));
                }
            displayImage();
        }

        

        void pb_Image()
        {      // 파라볼라 변화
            if (inImage == null)
                return;
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    outImage[i, k] = (byte)(255 * Math.Pow(((double)inImage[i, k] / 128) - 1, 2));
                }
            displayImage();
        }
        void lrm_Image()
        {      // 좌우 반전
            if (inImage == null)
                return;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    outImage[i, k] = inImage[i, inW - 1 - k];
                }
            }
            displayImage();
        }

        
        void udm_Image()
        {      // 상하 반전
            if (inImage == null)
                return;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {

                    outImage[i, k] = inImage[inH - 1 - i, k];
                }
            }
            displayImage();
        }

      
        void rot_Image()
        {      // 회전

            if (inImage == null)
                return;
            double val;
            int value = (int)getValue();
            double pi = 3.141592;
            double seta = pi / (180.0 / value);
            int center_x = inW / 2;
            int center_y = inH / 2;
            int x;
            int y;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    x = (int)((i - center_y) * Math.Sin(seta) + (k - center_x) * Math.Cos(seta) + center_x);
                    y = (int)((i - center_y) * Math.Cos(seta) - (k - center_x) * Math.Sin(seta) + center_y);
                    if (y < 0 || y >= inH)
                    {
                        // 회전된좌표가출력영상을위한배열값을넘어갈때
                        val = 0;
                    }
                    else if (x < 0 || x >= inW)
                    {
                        // 회전된좌표가출력영상을위한배열값을넘어갈때
                        val = 0;
                    }
                    else
                    {
                        val = inImage[y, x];
                    }
                    outImage[i, k] = (byte)(val);
                }
            }
            displayImage();
        }
        void zoom_out()
        {   // 축소  
            if (inImage == null)
                return;
            int value = (int)getValue();
            
            outH = (int)(inH / value); outW = (int)(inW / value);

            // 중요! 출력이미지의 높이, 폭을 결정-- > 알고리즘에 영향
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
            // ***진짜 영상처리 알고리즘을 구현 * **
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    outImage[i / value, k / value] = inImage[i, k];
                }
            displayImage();
        }

        

        void zoom_in()
        {   // 확대 
            if (inImage == null)
                return;
            int value = (int)getValue();
            outH = (int)(inH * value); outW = (int)(inW * value);
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    outImage[i, k] = inImage[i / value, k / value];
                }
            displayImage();
        }

        private void 경계선검출라플레시안ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            edge2_Image();
        }

        void emboss_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
                        const int MSIZE = 3;
            double[,] mask = { { -1.0, 0.0, 0.0 },
                               { 0.0, 0.0, 0.0 }, 
                               { 0.0, 0.0, 1.0 } };

            double[,] tmpInput = new double[inH + 2, inW + 2];
            double[,] tmpOutput = new double[outH, outW];

            for (int i = 0; i < inH + 2; i++)
                for (int k = 0; k < inW + 2; k++)
                    tmpInput[i, k] = 127.0;

            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                    tmpInput[i+1, k+1] = inImage[i, k];
            double S = 0.0;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    for (int m = 0; m < MSIZE; m++)
                        for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[i+m, k+n] * mask[m, n];
                    tmpOutput[i, k] = S;
                    S = 0.0;
                }
            }
            // 후처리 : Mask의 합이 0이면 127을 더하기.
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                    tmpOutput[i, k] += 127.0;
                // 임시 출력 --> 원래 출력
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        double d = tmpOutput[i, k];
                        if (d > 255.0)
                            d = 255.0;
                        else if (d < 0.0)
                            d = 0.0;
                        outImage[i, k] = (byte)d;
                    }
                        /////////////////////////////////////////////
                        displayImage();
        }
        void blur_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
            // 화소 영역 처리
            // 중요! 마스크 결정
            const int MSIZE = 3;
            double[,] mask = { { 1/9.0, 1/9.0, 1/9.0 },
                               { 1/9.0, 1/9.0, 1/9.0 },
                               { 1/9.0, 1/9.0, 1/9.0 } };

            // 임시 입력, 출력 메모리 할당
            double[,] tmpInput = new double[inH + 2, inW + 2];
            double[,] tmpOutput = new double[outH, outW];

            // 임시 입력을 중간값인 127로 초기화
            for (int i = 0; i < inH + 2; i++)
                for (int k = 0; k < inW + 2; k++)
                    tmpInput[i, k] = 127.0;
            // 입력 --> 임시 입력
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                    tmpInput[i + 1, k + 1] = inImage[i, k];
            double S = 0.0;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    for (int m = 0; m < MSIZE; m++)
                        for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[i + m, k + n] * mask[m, n];
                    tmpOutput[i, k] = S;
                    S = 0.0;
                }
            }
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[i, k] = (byte)d;
                }
            /////////////////////////////////////////////
            displayImage();
        }
        void sharpen_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 0.0, -1.0, 0.0 },
                               { -1.0, 5.0, -1.0 },
                               { 0.0, -1.0, 0.0 } };

            double[,] tmpInput = new double[inH + 2, inW + 2];
            double[,] tmpOutput = new double[outH, outW];

            for (int i = 0; i < inH + 2; i++)
                for (int k = 0; k < inW + 2; k++)
                    tmpInput[i, k] = 127.0;

            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                    tmpInput[i + 1, k + 1] = inImage[i, k];
            double S = 0.0;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    for (int m = 0; m < MSIZE; m++)
                        for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[i + m, k + n] * mask[m, n];
                    tmpOutput[i, k] = S;
                    S = 0.0;
                }
            }
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[i, k] = (byte)d;
                }
            /////////////////////////////////////////////
            displayImage();
        }
        void edge_Image()
        {       // 수평 엣지 검출
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 0.0, 0.0, 0.0 },
                               { -1.0, 1.0, 0.0 },
                               { 0.0, 0.0, 0.0 } };

            double[,] tmpInput = new double[inH + 2, inW + 2];
            double[,] tmpOutput = new double[outH, outW];

            for (int i = 0; i < inH + 2; i++)
                for (int k = 0; k < inW + 2; k++)
                    tmpInput[i, k] = 127.0;

            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                    tmpInput[i + 1, k + 1] = inImage[i, k];
            double S = 0.0;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    
                    for (int m = 0; m < MSIZE; m++)
                        for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[i + m, k + n] * mask[m, n];
                    tmpOutput[i, k] = S;
                    S = 0.0;
                }
            }
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[i, k] = (byte)d;
                }  
            displayImage();
        }
        void edge2_Image()
        {       // 라플레시안 엣지 검출
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 1.0, 1.0, 1.0 },
                               { 1.0, -8.0, 1.0 },
                               { 1.0, 1.0, 1.0 } };

            double[,] tmpInput = new double[inH + 2, inW + 2];
            double[,] tmpOutput = new double[outH, outW];

            for (int i = 0; i < inH + 2; i++)
                for (int k = 0; k < inW + 2; k++)
                    tmpInput[i, k] = 127.0;

            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                    tmpInput[i + 1, k + 1] = inImage[i, k];
            double S = 0.0;
            for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {

                    for (int m = 0; m < MSIZE; m++)
                        for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[i + m, k + n] * mask[m, n];
                    tmpOutput[i, k] = S;
                    S = 0.0;
                }
            }
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[i, k] = (byte)d;
                }
            displayImage();
        }
    }
}

    

