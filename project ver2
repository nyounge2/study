using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace Day015_1_칼라영상처리__Beta_1_
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        // 전역변수부
        byte[,,] inImage = null, outImage = null;
        int inH, inW, outH, outW;
        string fileName;
        Bitmap paper, bitmap;
        //bool mouseYN = false;
        int mouseYN = 0; // 0이면 Off, 나머지는 ON
        int sx, sy, ex, ey;
        // 임의 범위용
        int[] mx = new int[500];
        int[] my = new int[500];
        int mCount = 0;

        const int RGB = 3, RR = 0, GG = 1, BB = 2;

        // 메뉴 이벤트 처리부
        private void 열기ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openImage();
        }
        private void 저장ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            saveImage();
        }
        private void 동일이미지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            equal_Image();
        }
        private void 밝게어둡게ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            add_Image();
        }
        private void 그레이스케일ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            grayscale();
        }
        private void 흑백이미지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            bw_Image();
        }
        private void 색반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            rev_Image();
        }
        private void pictureBox1_MouseUp(object sender, MouseEventArgs e)
        {
            if (mouseYN == 0)
                return;
            else if (mouseYN == 1)
            {
                ex = e.X; ey = e.Y;
                if (sx > ex)
                {
                    int tmp = sx;
                    sx = ex;
                    ex = tmp;
                }
                if (sx > ey)
                {
                    int tmp = sy;
                    sy = ey;
                    ey = tmp;
                }
                switch (mouseYN)
                {
                    case 1: rev_Image(); break;
                }
                mouseYN = 0;
            }
        }
        private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
        {
            if (mouseYN == 0)
                return;
            else if (mouseYN == 1)
            {
                sx = e.X; sy = e.Y;
            }
            else if (mouseYN == 2) // 임의 범위
            {
                if (e.Button == MouseButtons.Left)
                {
                    mx[mCount] = e.X;
                    my[mCount] = e.Y;
                    mCount++;
                }
                else
                { 
                    if (inImage == null)
                        return;
                    outH = inH; outW = inW;
                    outImage = new byte[RGB, outH, outW];

                    for (int rgb = 0; rgb < RGB; rgb++)
                        for (int i = 0; i < inH; i++)
                            for (int k = 0; k < inW; k++)
                        {
                            if (pointInPolygon(rgb, k, i))
                                outImage[rgb, i, k] = (byte)(255 - inImage[rgb, i, k]);
                            else
                                outImage[rgb, i, k] = inImage[rgb, i, k];
                        }
                    displayImage();
                    // 초기화
                    mouseYN = 0;
                    mCount = 0;
                }
            }
        }
        private bool pointInPolygon(int RGB, int pntX, int pntY)
        {
            bool inPoly = false;
            int iCrosses = 0; // 교차 횟수
            for (int i = 0; i < mCount; i++)
            {
                int j = (i + 1) % mCount;
                if ((my[i] > pntY) != (my[j] > pntY))
                {
                    double atX =
 ((((double)mx[j] - mx[i]) / ((double)my[j] - my[i])) * ((double)pntY - my[i])) + (double)mx[i];
                    if (pntX < atX)
                        iCrosses++;
                }
            } // 홀수면 내부, 짝수면 외부에 있음 
            if (0 == (iCrosses % 2))
                inPoly = false;
            else inPoly = true;
            return inPoly;
        }
        private void 반전마우스ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mouseYN = 1;
        }

        private void 반전임의범위ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            mouseYN = 2;
        }
        private void 감마변환ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            gm_Image();
        }

        private void 솔라라이징ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            sol_Image();
        }

        private void 파라볼라ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            pb_Image();
        }
        private void 히스토그램그리기ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            draw_histogram();
        }
        

        private void 좌우반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            lrm_Image();
        }

        private void 상하반전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            udm_Image();
        }

        private void 회전ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            rot_Image();
        }

        private void 줌인ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            zoom_in();
        }

        private void 줌아웃ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            zoom_out();
        }
        private void 엠보싱ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            emboss_Image();
        }

        private void 블러링ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            blur_Image();
        }

        private void 샤프닝ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            sharpen_Image();
        }

        private void 경계선검출엣지ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            edge_Image();
        }

        private void 경계선검출라플레시안ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            edge2_Image();
        }

        private void 히스토그램ToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            histo_stretch();
        }

        private void 엔드인탐색ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            endin();
        }

        private void 히스토그램평활화ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            histo_equal();
        }

        // 공통 함수부
        double getValue()
        {
            subform sub = new subform(); // 서브폼 준비
            if (sub.ShowDialog() == DialogResult.Cancel)
                return 0;
            int value = (int)sub.numericUpDown1.Value;
            return value;
        }
            void openImage()
        {
             OpenFileDialog ofd = new OpenFileDialog();  // 객체 생성
            ofd.DefaultExt = "";
            ofd.Filter = "칼라 필터 | *.png; *.jpg; *.bmp; *.tif";

            if (ofd.ShowDialog() != DialogResult.OK)
                return;
            fileName = ofd.FileName;
            // 파일 --> 비트맵(bitmap)
            bitmap = new Bitmap(fileName);
            // 중요! 입력이미지의 높이, 폭 알아내기
            inW = bitmap.Height;
            inH = bitmap.Width;
            inImage= new byte[RGB, inH, inW]; // 메모리 할당
            // 비트맵(bitmap) --> 메모리(로딩)
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                    Color c = bitmap.GetPixel(i, k);
                    inImage[RR, i, k] = c.R;
                    inImage[GG, i, k] = c.G;
                    inImage[BB, i, k] = c.B;
                } 
            equal_Image();
        }
        void saveImage()
        {
            SaveFileDialog sfd = new SaveFileDialog();
            sfd.DefaultExt = "raw";
            sfd.Filter = "로우 이미지(*.raw) | *.raw";
            if (sfd.ShowDialog() == DialogResult.OK)
            {
                string saveFname = sfd.FileName;
                BinaryWriter bw = new BinaryWriter(File.Open(saveFname, FileMode.Create));
                for (int rgb = 0; rgb < RGB; rgb++)
                    for (int i = 0; i < outH; i++)
                        for (int k = 0; k < outW; k++)
                        bw.Write(outImage[rgb, i, k]);
                MessageBox.Show("저장되었습니다.");
                bw.Close();
            }
        }
            // 영상처리 함수부
        void equal_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            for(int rgb=0; rgb<RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb,i, k] = inImage[rgb,i, k];
                    }
            displayImage();
        }
        void displayImage()
        {
            // 벽, 게시판, 종이 크기 조절
            paper = new Bitmap(outH, outW); // 종이
            pictureBox1.Size = new Size(outH, outW); // 캔버스
            this.Size = new Size(outH + 20, outW + 80); // 벽

            Color pen; // 펜(콕콕 찍을 용도)
            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    byte r = outImage[RR, i, k]; // 잉크(색상값)
                    byte g = outImage[GG, i, k];
                    byte b = outImage[BB, i, k];
                    pen = Color.FromArgb(r, g, b); // 펜에 잉크 묻히기
                    paper.SetPixel(i, k, pen); // 종이에 콕 찍기
                }
            pictureBox1.Image = paper; // 게시판에 종이를 붙이기.
            toolStripStatusLabel1.Text =
                outH.ToString() + "x" + outW.ToString() + "  " + fileName;
        }
        void add_Image()
        {
            if (inImage == null)
                return;
            int value=(int)getValue();
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        if (inImage[rgb, i, k] + value > 255)
                            outImage[rgb, i, k] = 255;
                        else if (inImage[rgb, i, k] + value < 0)
                            outImage[rgb, i, k] = 0;
                        else
                            outImage[rgb, i, k] = (byte)(inImage[rgb, i, k] + value);
                    }
            displayImage();
        }
        void grayscale()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            for (int i = 0; i < inH; i++)
                for (int k = 0; k < inW; k++)
                {
                   int hap = inImage[RR, i, k] + inImage[GG, i, k] + inImage[BB, i, k];
                   byte rgb = (byte)(hap / 3.0);
                outImage[RR, i, k] = rgb;
                outImage[GG, i, k] = rgb;
                outImage[BB, i, k] = rgb;
            }
          displayImage();
        }
        void bw_Image()
        {      // 평균 기준 흑백
            if (inImage == null)
                return;
            int sum = 0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++){
                    for (int k = 0; k < inW; k++)
                {
                    sum += outImage[rgb, i, k];
                }
            }
            double avg = (double)sum / (RGB* inH * inW);   // 평균
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
            {
                   for (int k = 0; k < inW; k++)
                {
                    if (outImage[rgb, i, k] < avg)
                        outImage[rgb, i, k] = 0;
                    else
                        outImage[rgb, i, k] = 255;
                }
            }
            displayImage();
        }

        void rev_Image()
        {      // 영상 반전
            if (mouseYN == 0)
            {
                sx = 0; ex = inH;
                sy = 0; ey = inW;
            }
            for (int rgb = 0; rgb < RGB; rgb++)
            {
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        if ((sx <= k && k <= ex) && (sy <= i && i <= ey))
                            outImage[rgb, i, k] = (byte)(255 - inImage[rgb, i, k]);
                        else
                            outImage[rgb, i, k] = inImage[rgb, i, k];
                    }
                }
            }
            displayImage();
        }
        void gm_Image()
        {      // 감마 변환
            if (inImage == null)
                return;
            int value = (int)getValue();
            for (int rgb = 0; rgb < RGB; rgb++)
            {
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = (byte)(255.0 * Math.Pow(((double)inImage[rgb, i, k] / 255.0), value));
                        if (outImage[rgb, i, k] > 255)
                        {
                            outImage[rgb, i, k] = 255;
                        }
                    }
                }
            }
            displayImage();
        }
        void sol_Image()
        {      // 솔라라이징
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    outImage[rgb, i, k] = (byte)(255 - (255 * Math.Pow(((double)inImage[rgb, i, k] / 128) - 1, 2)));
                }
            displayImage();
        }
        void pb_Image()
        {      // 파라볼라 변화
            if (inImage == null)
                return;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    outImage[rgb, i, k] = (byte)(255 * Math.Pow(((double)inImage[rgb, i, k] / 128) - 1, 2));
                }
            displayImage();
        }
        void lrm_Image()
        {      // 좌우 반전
            if (inImage == null)
                return;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    {
                        outImage[rgb, i, k] = inImage[rgb, i, inW - 1 - k];
                    }
            displayImage();
        }
        void udm_Image()
        {      // 상하 반전
            if (inImage == null)
                return;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++) {
                    for (int k = 0; k < inW; k++)
                {
                    outImage[rgb, i, k] = inImage[rgb, inH - 1 - i, k];
                }
            }
            displayImage();
        }
        void rot_Image()
        {      // 회전
            if (inImage == null)
                return;
            double val;
            int value = (int)getValue();
            double pi = 3.141592;
            double seta = pi / (180.0 / value);
            int center_x = inW / 2;
            int center_y = inH / 2;
            int x;
            int y;

            for (int rgb = 0; rgb < RGB; rgb++) 
                for (int i = 0; i < inH; i++)
            {
                    for (int k = 0; k < inW; k++)
                {
                    x = (int)((i - center_y) * Math.Sin(seta) + (k - center_x) * Math.Cos(seta) + center_x);
                    y = (int)((i - center_y) * Math.Cos(seta) - (k - center_x) * Math.Sin(seta) + center_y);
                    if (y < 0 || y >= inH)
                    {
                        // 회전된좌표가출력영상을위한배열값을넘어갈때
                        val = 0;
                    }
                    else if (x < 0 || x >= inW)
                    {
                        // 회전된좌표가출력영상을위한배열값을넘어갈때
                        val = 0;
                    }
                    else
                    {
                        val = inImage[rgb, y, x];
                    }
                    outImage[rgb, i, k] = (byte)(val);
                }
            }
            displayImage();
        }

        void zoom_out()
        {   // 축소  
            if (inImage == null)
                return;
            int value = (int)getValue();
            outH = (int)(inH / value); outW = (int)(inW / value);
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    outImage[rgb / value, i / value, k / value] = inImage[rgb, i, k];
                }
            displayImage();
        }
        void zoom_in()
        {   // 확대 
            if (inImage == null)
                return;
            int value = (int)getValue();
            outH = (int)(inH * value); outW = (int)(inW * value);
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                   for (int k = 0; k < inW; k++)
                {
                    outImage[rgb, i, k] = inImage[rgb / value, i / value, k / value];
                }
            displayImage();
        }
        void draw_histogram()
        {
            long[] rHisto = new long[256];
            long[] gHisto = new long[256];
            long[] bHisto = new long[256];

            for (int i = 0; i < outH; i++)
                for (int k = 0; k < outW; k++)
                {
                    rHisto[outImage[RR, i, k]]++;
                    gHisto[outImage[GG, i, k]]++;
                    bHisto[outImage[BB, i, k]]++;
                }
            Form2 hform = new Form2(rHisto, gHisto, bHisto);
            hform.ShowDialog();
        }
        void emboss_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { -1.0, 0.0, 0.0 },
                               { 0.0, 0.0, 0.0 },
                               { 0.0, 0.0, 1.0 } };
            double[,,] tmpInput = new double[RGB,inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    tmpInput[rgb+1, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
            {
                for (int k = 0; k < inW; k++)
                {
                    for (int m = 0; m < MSIZE; m++)
                        for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[rgb,i + m, k + n] * mask[m, n];
                    tmpOutput[rgb,i, k] = S;
                    S = 0.0;
                }
            }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    tmpOutput[rgb,i, k] += 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[rgb, i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[rgb, i, k] = (byte)d;
                }
            displayImage();
        }
        void blur_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 1/9.0, 1/9.0, 1/9.0 },
                               { 1/9.0, 1/9.0, 1/9.0 },
                               { 1/9.0, 1/9.0, 1/9.0 } };

            double[,,] tmpInput = new double[RGB, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                  for (int k = 0; k < inW + 2; k++)
                    tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                   for (int k = 0; k < inW; k++)
                    tmpInput[rgb,i + 1, k + 1] = inImage[rgb,i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
            {
                   for (int k = 0; k < inW; k++)
                {
                       for (int m = 0; m < MSIZE; m++)
                           for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[rgb,i + m, k + n] * mask[m, n];
                    tmpOutput[rgb, i, k] = S;
                    S = 0.0;
                }
            }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[rgb, i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[rgb, i, k] = (byte)d;
                }
            displayImage();
        }
        void sharpen_Image()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 0.0, -1.0, 0.0 },
                               { -1.0, 5.0, -1.0 },
                               { 0.0, -1.0, 0.0 } };

            double[,,] tmpInput = new double[RGB, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                    tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    tmpInput[rgb, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
            {
                    for (int k = 0; k < inW; k++)
                {
                        for (int m = 0; m < MSIZE; m++)
                            for (int n = 0; n < MSIZE; n++)
                            S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                    tmpOutput[rgb, i, k] = S;
                    S = 0.0;
                }
            }
            for (int rgb = 0; rgb < RGB; rgb++) 
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[rgb, i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[rgb, i, k] = (byte)d;
                }
            displayImage();
        }
        void edge_Image()
        {       // 수평 엣지 검출
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 0.0, 0.0, 0.0 },
                               { -1.0, 1.0, 0.0 },
                               { 0.0, 0.0, 0.0 } };
            double[,,] tmpInput = new double[RGB+2, inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        tmpInput[rgb+1, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
            {
                    for (int k = 0; k < inW; k++)
                {
                       for (int m = 0; m < MSIZE; m++)
                          for (int n = 0; n < MSIZE; n++)
                    S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                    tmpOutput[rgb, i, k] = S;
                    S = 0.0;
                }
            }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                {
                    double d = tmpOutput[rgb, i, k];
                    if (d > 255.0)
                        d = 255.0;
                    else if (d < 0.0)
                        d = 0.0;
                    outImage[rgb, i, k] = (byte)d;
                }
            displayImage();
        }
        void edge2_Image()
        {       // 라플레시안 엣지 검출
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            const int MSIZE = 3;
            double[,] mask = { { 1.0, 1.0, 1.0 },
                               { 1.0, -8.0, 1.0 },
                               { 1.0, 1.0, 1.0 } };
            double[,,] tmpInput = new double[RGB+2 , inH + 2, inW + 2];
            double[,,] tmpOutput = new double[RGB, outH, outW];

            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH + 2; i++)
                    for (int k = 0; k < inW + 2; k++)
                        tmpInput[rgb, i, k] = 127.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                        tmpInput[rgb + 1, i + 1, k + 1] = inImage[rgb, i, k];
            double S = 0.0;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                {
                    for (int k = 0; k < inW; k++)
                    {
                        for (int m = 0; m < MSIZE; m++)
                            for (int n = 0; n < MSIZE; n++)
                                S += tmpInput[rgb, i + m, k + n] * mask[m, n];
                        tmpOutput[rgb, i, k] = S;
                        S = 0.0;
                    }
                }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < outH; i++)
                    for (int k = 0; k < outW; k++)
                    {
                        double d = tmpOutput[rgb, i, k];
                        if (d > 255.0)
                            d = 255.0;
                        else if (d < 0.0)
                            d = 0.0;
                        outImage[rgb, i, k] = (byte)d;
                    }
            displayImage();
        }
        void histo_stretch()
        {   //히스토그램 스트레칭
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];

            byte min_val = inImage[0, 0, 0], max_val = inImage[0, 0, 0];

            for (int rgb = 0; rgb < RGB; rgb++) 
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    if (min_val > inImage[rgb, i, k])
                        min_val = inImage[rgb, i, k];
                    if (max_val < inImage[rgb, i, k])
                        max_val = inImage[rgb, i, k];
                }
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    // Out = (In - min) / (max - min) * 255.0
                    outImage[rgb, i, k] = (byte)
                    ((double)(inImage[rgb, i, k] - min_val) / (max_val - min_val) * 255.0);
                }
            displayImage();
        }
        void endin()
        {   // 엔드인 탐색
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];

            byte min_val = inImage[0, 0, 0], max_val = inImage[0, 0, 0];

            for (int rgb = 0; rgb < RGB; rgb++) 
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    if (min_val > inImage[rgb, i, k])
                        min_val = inImage[rgb, i, k];
                    if (max_val < inImage[rgb, i, k])
                        max_val = inImage[rgb, i, k];
                }
            // min, max 값을 강제로 변경
            min_val += 50;
            max_val -= 50;
            for (int rgb = 0; rgb < RGB; rgb++)
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    // Out = (In - min) / (max - min) * 255.0
                    double value =
                   ((double)(inImage[rgb, i, k] - min_val) / (max_val - min_val) * 255.0);
                    if (value > 255)
                        value = 255;
                    else if (value < 0)
                        value = 0;
                    outImage[rgb, i, k] = (byte)value;
                }
            displayImage();
        }
        void histo_equal()
        {
            if (inImage == null)
                return;
            outH = inH; outW = inW;
            outImage = new byte[RGB, outH, outW];
            ulong[] histo = new ulong[256];
            for (int rgb = 0; rgb < RGB; rgb++) 
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                    histo[inImage[rgb, i, k]]++;
            ulong[] sumHisto = new ulong[256];
            ulong sum_val = 0;
            for (int i = 0; i < 256; i++)
            {
                sum_val += histo[i];
                sumHisto[i] = sum_val;
            }
            double[] normalHisto = new double[256];
            for (int i = 0; i < 256; i++)
            {
                normalHisto[i] = ((double)sumHisto[i] / (RGB * inH * inW)) * 255.0;
            }
            for (int rgb = 0; rgb < RGB; rgb++) 
                for (int i = 0; i < inH; i++)
                    for (int k = 0; k < inW; k++)
                {
                    outImage[rgb, i, k] = (byte)normalHisto[inImage[rgb, i, k]];
                }
            displayImage();
        }
    }
}
